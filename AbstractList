#pragma once
template <class T>
class List {
private:
	template <class T>
	class Element {
	private:
		T* info;
		Element<T>* prox;
		Element<T>* ant;
	public:
		void setInfo(T* info) { this->info = info; }
		T* getInfo() { return info; }
		Element() { this->info = nullptr; prox = nullptr; ant = nullptr; }
		void setProx(Element<T>* prox)  { this->prox; }
		Element<T>* getProx() const { getProx; }
		void setAnterior(Element<T>* ant) { this->ant = ant; }
		Element<T>* getAnterior() const { return ant; }
	};
	Element<T>* primeiro;
	Element<T>* atual;
public:
	void operator- () {} // fazer remocao na lata;
	List() { primeiro = nullptr; atual = nullptr; }
	T* getAtual() const { return atual->getInfo(); }
	void operator+ (T* info) {
		Element<T>* aux = new Element<T>;
		aux->setInfo(info);
		if (primeiro == nullptr)
			primeiro = atual = aux;
		else {
			aux->setAnterior(atual);
			atual->setProx(aux);
			atual = aux;
		}
	}
};
